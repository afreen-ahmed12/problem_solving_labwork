PROGRAM=-01
#include <bits/stdc++.h>
using namespace std;

#define N 4
void rotate90Clockwise(int a[N][N])
{
	for (int i = 0; i < N / 2; i++) {
		for (int j = i; j < N - i - 1; j++) {

		
			int temp = a[i][j];
			a[i][j] = a[N - 1 - j][i];
			a[N - 1 - j][i] = a[N - 1 - i][N - 1 - j];
			a[N - 1 - i][N - 1 - j] = a[j][N - 1 - i];
			a[j][N - 1 - i] = temp;
		}
	}
void printMatrix(int arr[N][N])
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
			cout << arr[i][j] << " ";
		cout << '\n';
	}
}
int main()
{
	int arr[N][N] = { { 1, 2, 3, 4 },
					{ 5, 6, 7, 8 },
					{ 9, 10, 11, 12 },
					{ 13, 14, 15, 16 } };
	rotate90Clockwise(arr);
	printMatrix(arr);
	return 0;
}


PROGRAM-02
 #include <bits/stdc++.h>
#def
 }}}
void transpose(int arr[N][N])
{
 for (int i = 0; i < N; i++)
 for (int j = i; j < N; j++)
 swap(arr[i][j], arr[j][i]);
}
void print_matrix(int mat[N][N])
{
 for (int i = 0; i < N; i++)
 {
 for (int j = 0; j < N; j++)
 printf("%d\t", mat[i][j]);

printf("\n");
 }
 printf("\n");
}
 
// Main function
int main()
{
 int mat[N][N] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
 cout<<"The matrix before rotation\n";
 print_matrix(mat);
 transpose(mat);
 cout<<"The matrix after rotation - anticlockwise\n";
 reverse_column(mat);
 print_matrix(mat);
 return 0;
}

PROGRAM-03

#include <stdio.h>
#include <stdbool.h>

# define my_sizeof(type) ((char *)(&type+1)-(char*)(&type
bool isMagicSquare(int mat[][3])
{
	int n = my_sizeof(mat)/my_sizeof(mat[0]);

	// calculate the sum of
	// the prime diagonal
	int i = 0, j = 0;

	// sumd1 and sumd2 are the sum of the two diagonals
	int sumd1 = 0, sumd2=0;
	for (i = 0; i < n; i++)
	{
		// (i, i) is the diagonal from top-left -> bottom-right
		// (i, n - i - 1) is the diagonal from top-right -> bottom-left
		sumd1 += mat[i][i];
		sumd2 += mat[i][n-1-i];
	}
	if(sumd1!=sumd2)
		return false;
	for (i = 0; i < n; i++) {
		
		int rowSum = 0, colSum = 0;
		for (j = 0; j < n; j++)
		{
			rowSum += mat[i][j];
			colSum += mat[j][i];
		}
		if (rowSum != colSum || colSum != sumd1)
			return false;
	}
return true;

// test above function
int main()
{
	int mat[3][3] = {{ 2, 7, 6 },
					{ 9, 5, 1 },
					{ 4, 3, 8 }};
	
	if (isMagicSquare(mat))
		printf("Magic Square");
	else
		printf("Not a magic Square");
	
	return 0;
}


PROGRAM-05
#include<stdio.h>
#include<conio.h>
 
int main() {
   int size = 3;
   int matrix[3][3]; // = {{4,9,2},{3,5,7},{8,1,6}};
   int row, column = 0;
   int sum, sum1, sum2;
   int flag = 0;
 
   printf("\nEnter matrix : ");
   for (row = 0; row < size; row++) {
      for (column = 0; column < size; column++)
         scanf("%d", &matrix[row][column]);
   }
 
   printf("Entered matrix is : \n");
   for (row = 0; row < size; row++) {
      printf("\n");
      for (column = 0; column < size; column++) {
         printf("\t%d", matrix[row][column]);
      }
   }
 
   //For diagonal elements
   sum = 0;
   for (row = 0; row < size; row++) {
      for (column = 0; column < size; column++) {
         if (row == column)
            sum = sum + matrix[row][column];
      }
   }
 
   //For Rows
   for (row = 0; row < size; row++) {
      sum1 = 0;
      for (column = 0; column < size; column++) {
         sum1 = sum1 + matrix[row][column];
      }
      if (sum == sum1)
         flag = 1;
      else {flag = 0;
         break;
      }
   }
 
   //For Columns
   for (row = 0; row < size; row++) {
      sum2 = 0;
      for (column = 0; column < size; column++) {
         sum2 = sum2 + matrix[column][row];
      }
      if (sum == sum2)
         flag = 1;
      else {
         flag = 0;
         break;
      }
   }
 
   if (flag == 1)
      printf("\nMagic square");
   else
      printf("\nNo Magic square");
 
   return 0;
}

PROGRAM-06

#include <bits/stdc++.h>
using namespace std;

vector<int> spiralOrder(vector<vector<int> >& matrix)
{
	int m = matrix.size(), n = matrix[0].size();
	vector<int> ans;

	if (m == 0)
		return ans;

	vector<vector<bool> > seen(m, vector<bool>(n, false));
	int dr[] = { 0, 1, 0, -1 };
	int dc[] = { 1, 0, -1, 0 };

	int x = 0, y = 0, di = 0;

	// Iterate from 0 to m * n - 1
	for (int i = 0; i < m * n; i++) {
		ans.push_back(matrix[x][y]);
		// on normal geeksforgeeks ui page it is showing
		// 'ans.push_back(matrix[x])' which gets copied as
		// this only and gives error on compilation,
		seen[x][y] = true;
		int newX = x + dr[di];
		int newY = y + dc[di];

		if (0 <= newX && newX < m && 0 <= newY && newY < n
			&& !seen[newX][newY]) {
			x = newX;
			y = newY;
		}
		else {
			di = (di + 1) % 4;
			x += dr[di];
			y += dc[di];
		}
	}
	return ans;
}

// Driver code
int main()
{
	vector<vector<int> > a{ { 1, 2, 3, 4 },
							{ 5, 6, 7, 8 },
							{ 9, 10, 11, 12 },
							{ 13, 14, 15, 16 } };

	// Function call
	for (int x : spiralOrder(a)) {
		cout << x << " ";
	}
	return 0;
}

// This code is contributed by Yashvendra Singh


PROGRAM-08
#include<bits/stdc++.h>
using namespace std;
const int CHARS = 26;


int remAnagram(string str1, string str2)
{
	
	int count1[CHARS] = {0}, count2[CHARS] = {0};


	for (int i=0; str1[i]!='\0'; i++)
		count1[str1[i]-'a']++;
	for (int i=0; str2[i]!='\0'; i++)
		count2[str2[i]-'a']++;
	int result = 0;
	for (int i=0; i<26; i++)
		result += abs(count1[i] - count2[i]);
	return result;
}

// Driver program to run the case
int main()
{
	string str1 = "bcadeh", str2 = "hea";
	cout << remAnagram(str1, str2);
	return 0;
}


PROGRAM-09


#include <bits/stdc++.h>
#define N 3
using namespace std;
void rotateMatrix(int mat[][N])
{
	// Simply print from last cell to first cell.
	for (int i = N - 1; i >= 0; i--) {
		for (int j = N - 1; j >= 0; j--)
			printf("%d ", mat[i][j]);

		printf("\n");
	}
}

// Driven code
int main()
{
	int mat[N][N] = {
		{ 1, 2, 3 },
		{ 4, 5, 6 },
		{ 7, 8, 9 }
	};

	rotateMatrix(mat);
	return 0;
}


PROGRAM-10
// C++ program to rotate a matrix

#include <bits/stdc++.h>
#define R 4
#define C 4
using namespace std;

// A function to rotate a matrix mat[][] of size R x C.
// Initially, m = R and n = C
void rotatematrix(int m, int n, int mat[R][C])
{
	int row = 0, col = 0;
	int prev, curr;

	/*
	row - Starting row index
	m - ending row index
	col - starting column index
	n - ending column index
	i - iterator
	*/
	while (row < m && col < n)
	{

		if (row + 1 == m || col + 1 == n)
			break;

		// Store the first element of next row, this
		// element will replace first element of current
		// row
		prev = mat[row + 1][col];

		/* Move elements of first row from the remaining rows */
		for (int i = col; i < n; i++)
		{
			curr = mat[row][i];
			mat[row][i] = prev;
			prev = curr;
		}
		row++;

		/* Move elements of last column from the remaining columns */
		for (int i = row; i < m; i++)
		{
			curr = mat[i][n-1];
			mat[i][n-1] = prev;
			prev = curr;
		}
		n--;

		/* Move elements of last row from the remaining rows */
		if (row < m)
		{
			for (int i = n-1; i >= col; i--)
			{
				curr = mat[m-1][i];
				mat[m-1][i] = prev;
				prev = curr;
			}
		}
		m--;

		/* Move elements of first column from the remaining rows */
		if (col < n)
		{
			for (int i = m-1; i >= row; i--)
			{
				curr = mat[i][col];
				mat[i][col] = prev;
				prev = curr;
			}
		}
		col++;
	}

	// Print rotated matrix
	for (int i=0; i<R; i++)
	{
		for (int j=0; j<C; j++)
		cout << mat[i][j] << " ";
		cout << endl;
	}
}

/* Driver program to test above functions */
int main()
{
	// Test Case 1
	int a[R][C] = { {1, 2, 3, 4},
		{5, 6, 7, 8},
		{9, 10, 11, 12},
		{13, 14, 15, 16} };

	// Test Case 2
	/* int a[R][C] = {{1, 2, 3},
					{4, 5, 6},
					{7, 8, 9}
					};
	*/ rotatematrix(R, C, a);
	return 0;
}


